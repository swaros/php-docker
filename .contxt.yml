config:
  imports:
     - configs/services.yaml service
  variables:
    print_pwd_var: "$(pwd)"
    create: "true"
task:
  - id: build-all
    script:
      - echo '-- building php docker images'
    next:
{{- range $name, $container := .container }}
{{- if $container.createtask }}
      - build-dockerfile-{{ $name }}
      - build-dockerimage-{{ $name }}
{{- end }}
{{- end }}



  - id: build-dockerfiles
    next:
{{- range $name, $container := .container }}
{{- if $container.createtask }}
      - build-dockerfile-{{ $name }}
{{- end }}
{{- end }}

{{- range $name, $container := .container }}
{{- if $container.createtask }}
  - id: build-dockerfile-{{ $name }}
    script:
      - echo "based on image [{{ .image }}]"
      - echo "FROM {{ .image }}" > {{ $name }}.Dockerfile
      - echo "WORKDIR {{ .path }}" >> {{ $name }}.Dockerfile
  {{- if .services }}
      - echo "# services ---- " >> {{ $name }}.Dockerfile
      - echo "RUN apt-get update -yqq" >> {{ $name }}.Dockerfile
    {{- range $si, $service := .services }}
      - echo "# ---- {{ $service }} " >> {{ $name }}.Dockerfile
      - echo "install service [{{ $service }}]"
      - echo "${service:services.{{ $service }}.dockerfile}" >> {{ $name }}.Dockerfile
    {{- end }}
  {{- end }}
      - echo "using composer with"
      - echo '     docker run -i --rm -v $(pwd):{{ .path }} {{ .name }} php composer.phar'


  # building docker images
  - id: build-dockerimage-{{ $name }}
    require:
      exists:
         - {{ $name }}.Dockerfile
    script:
      - docker build -t {{ .name }} -f {{ $name }}.Dockerfile .
    next:
      {{- if .testfile }}
      - test-image-{{ $name }}
      {{- end }}
  {{- if .testfile }}
  # testing of the builded images if defined
  - id: test-image-{{ $name }}
    require:
      exists:
         - templates/{{ .testfile }}
    script:
      - docker run -i --rm -v $(pwd):{{ .path }} {{ .name }} php {{ .path }}templates/{{ .testfile }}
  {{- end }}
{{- end }}
{{- end }}
